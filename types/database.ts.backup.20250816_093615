export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instanciate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: "13.0.4"
  }
  public: {
    Tables: {
      account_members: {
        Row: {
          account_id: string | null
          id: string
          invited_by: string | null
          joined_at: string | null
          role: string | null
          user_id: string | null
        }
        Insert: {
          account_id?: string | null
          id?: string
          invited_by?: string | null
          joined_at?: string | null
          role?: string | null
          user_id?: string | null
        }
        Update: {
          account_id?: string | null
          id?: string
          invited_by?: string | null
          joined_at?: string | null
          role?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "account_members_account_id_fkey"
            columns: ["account_id"]
            isOneToOne: false
            referencedRelation: "accounts"
            referencedColumns: ["id"]
          },
        ]
      }
      accounts: {
        Row: {
          billing_email: string | null
          created_at: string | null
          id: string
          metadata: Json | null
          name: string
          onboarding_completed: boolean | null
          onboarding_completed_at: string | null
          owner_id: string | null
          slug: string
          status: Database["public"]["Enums"]["account_status"] | null
          stripe_customer_id: string | null
          updated_at: string | null
        }
        Insert: {
          billing_email?: string | null
          created_at?: string | null
          id?: string
          metadata?: Json | null
          name: string
          onboarding_completed?: boolean | null
          onboarding_completed_at?: string | null
          owner_id?: string | null
          slug: string
          status?: Database["public"]["Enums"]["account_status"] | null
          stripe_customer_id?: string | null
          updated_at?: string | null
        }
        Update: {
          billing_email?: string | null
          created_at?: string | null
          id?: string
          metadata?: Json | null
          name?: string
          onboarding_completed?: boolean | null
          onboarding_completed_at?: string | null
          owner_id?: string | null
          slug?: string
          status?: Database["public"]["Enums"]["account_status"] | null
          stripe_customer_id?: string | null
          updated_at?: string | null
        }
        Relationships: []
      }
      invoices: {
        Row: {
          account_id: string | null
          amount_due: number
          amount_paid: number | null
          created: string
          created_at: string | null
          currency: string | null
          due_date: string | null
          hosted_invoice_url: string | null
          id: string
          invoice_pdf: string | null
          paid_at: string | null
          status: string
          stripe_customer_id: string
          stripe_invoice_id: string
          subscription_id: string | null
          updated_at: string | null
        }
        Insert: {
          account_id?: string | null
          amount_due: number
          amount_paid?: number | null
          created: string
          created_at?: string | null
          currency?: string | null
          due_date?: string | null
          hosted_invoice_url?: string | null
          id?: string
          invoice_pdf?: string | null
          paid_at?: string | null
          status: string
          stripe_customer_id: string
          stripe_invoice_id: string
          subscription_id?: string | null
          updated_at?: string | null
        }
        Update: {
          account_id?: string | null
          amount_due?: number
          amount_paid?: number | null
          created?: string
          created_at?: string | null
          currency?: string | null
          due_date?: string | null
          hosted_invoice_url?: string | null
          id?: string
          invoice_pdf?: string | null
          paid_at?: string | null
          status?: string
          stripe_customer_id?: string
          stripe_invoice_id?: string
          subscription_id?: string | null
          updated_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "invoices_account_id_fkey"
            columns: ["account_id"]
            isOneToOne: false
            referencedRelation: "accounts"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "invoices_subscription_id_fkey"
            columns: ["subscription_id"]
            isOneToOne: false
            referencedRelation: "subscriptions"
            referencedColumns: ["id"]
          },
        ]
      }
      portfolio_history: {
        Row: {
          created_at: string
          date: string | null
          id: string
          portfolio_id: string | null
          value: number | null
        }
        Insert: {
          created_at?: string
          date?: string | null
          id?: string
          portfolio_id?: string | null
          value?: number | null
        }
        Update: {
          created_at?: string
          date?: string | null
          id?: string
          portfolio_id?: string | null
          value?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "portfolio_history_portfolio_id_fkey"
            columns: ["portfolio_id"]
            isOneToOne: false
            referencedRelation: "portfolios"
            referencedColumns: ["id"]
          },
        ]
      }
      portfolio_recommendations: {
        Row: {
          action: Database["public"]["Enums"]["portfolio_action"] | null
          amount: number | null
          created_at: string
          date: string | null
          description: string | null
          id: string
          portfolio_id: string | null
          security_id: string | null
        }
        Insert: {
          action?: Database["public"]["Enums"]["portfolio_action"] | null
          amount?: number | null
          created_at?: string
          date?: string | null
          description?: string | null
          id?: string
          portfolio_id?: string | null
          security_id?: string | null
        }
        Update: {
          action?: Database["public"]["Enums"]["portfolio_action"] | null
          amount?: number | null
          created_at?: string
          date?: string | null
          description?: string | null
          id?: string
          portfolio_id?: string | null
          security_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "portfolio_recommendation_portfolio_id_fkey"
            columns: ["portfolio_id"]
            isOneToOne: false
            referencedRelation: "portfolios"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "portfolio_recommendation_security_id_fkey"
            columns: ["security_id"]
            isOneToOne: false
            referencedRelation: "securities"
            referencedColumns: ["id"]
          },
        ]
      }
      portfolio_securities: {
        Row: {
          amount: number | null
          created_at: string
          id: string
          portfolio_id: string
          security_id: string | null
          worth: number | null
        }
        Insert: {
          amount?: number | null
          created_at?: string
          id?: string
          portfolio_id: string
          security_id?: string | null
          worth?: number | null
        }
        Update: {
          amount?: number | null
          created_at?: string
          id?: string
          portfolio_id?: string
          security_id?: string | null
          worth?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "portfolio_assets_asset_id_fkey"
            columns: ["security_id"]
            isOneToOne: false
            referencedRelation: "securities"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "portfolio_assets_portfolio_id_fkey"
            columns: ["portfolio_id"]
            isOneToOne: false
            referencedRelation: "portfolios"
            referencedColumns: ["id"]
          },
        ]
      }
      portfolio_transactions: {
        Row: {
          action: Database["public"]["Enums"]["portfolio_action"] | null
          amount: number | null
          created_at: string
          date: string | null
          fee: number | null
          id: string
          portfolio_id: string | null
          portfolio_recommendation_id: string | null
          price: number | null
          security_id: string | null
        }
        Insert: {
          action?: Database["public"]["Enums"]["portfolio_action"] | null
          amount?: number | null
          created_at?: string
          date?: string | null
          fee?: number | null
          id?: string
          portfolio_id?: string | null
          portfolio_recommendation_id?: string | null
          price?: number | null
          security_id?: string | null
        }
        Update: {
          action?: Database["public"]["Enums"]["portfolio_action"] | null
          amount?: number | null
          created_at?: string
          date?: string | null
          fee?: number | null
          id?: string
          portfolio_id?: string | null
          portfolio_recommendation_id?: string | null
          price?: number | null
          security_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "portfolio_transactions_portfolio_recommendation_id_fkey"
            columns: ["portfolio_recommendation_id"]
            isOneToOne: false
            referencedRelation: "portfolio_recommendation"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "transactions_portfolio_id_fkey"
            columns: ["portfolio_id"]
            isOneToOne: false
            referencedRelation: "portfolios"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "transactions_security_id_fkey"
            columns: ["security_id"]
            isOneToOne: false
            referencedRelation: "securities"
            referencedColumns: ["id"]
          },
        ]
      }
      portfolios: {
        Row: {
          account_id: string | null
          created_at: string
          description: string | null
          id: string
          is_default: boolean | null
          liquid_funds: number | null
          name: string
          risk_level: Database["public"]["Enums"]["risk_level"] | null
          sectors: Json | null
          updated_at: string | null
          user_id: string
        }
        Insert: {
          account_id?: string | null
          created_at?: string
          description?: string | null
          id?: string
          is_default?: boolean | null
          liquid_funds?: number | null
          name: string
          risk_level?: Database["public"]["Enums"]["risk_level"] | null
          sectors?: Json | null
          updated_at?: string | null
          user_id: string
        }
        Update: {
          account_id?: string | null
          created_at?: string
          description?: string | null
          id?: string
          is_default?: boolean | null
          liquid_funds?: number | null
          name?: string
          risk_level?: Database["public"]["Enums"]["risk_level"] | null
          sectors?: Json | null
          updated_at?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "portfolios_account_id_fkey"
            columns: ["account_id"]
            isOneToOne: false
            referencedRelation: "accounts"
            referencedColumns: ["id"]
          },
        ]
      }
      securities: {
        Row: {
          asset_type: string | null
          created_at: string
          currency: string | null
          exchange: string | null
          id: string
          industry: string | null
          name: string | null
          sector: string | null
          symbol: string
          updated_at: string | null
        }
        Insert: {
          asset_type?: string | null
          created_at?: string
          currency?: string | null
          exchange?: string | null
          id?: string
          industry?: string | null
          name?: string | null
          sector?: string | null
          symbol: string
          updated_at?: string | null
        }
        Update: {
          asset_type?: string | null
          created_at?: string
          currency?: string | null
          exchange?: string | null
          id?: string
          industry?: string | null
          name?: string | null
          sector?: string | null
          symbol?: string
          updated_at?: string | null
        }
        Relationships: []
      }
      security_prices: {
        Row: {
          created_at: string
          date: string
          price: number | null
          security_id: string
        }
        Insert: {
          created_at?: string
          date: string
          price?: number | null
          security_id: string
        }
        Update: {
          created_at?: string
          date?: string
          price?: number | null
          security_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "asset_price_asset_id_fkey"
            columns: ["security_id"]
            isOneToOne: false
            referencedRelation: "securities"
            referencedColumns: ["id"]
          },
        ]
      }
      stripe_webhook_events: {
        Row: {
          created_at: string | null
          data: Json
          event_type: string
          id: string
          processed: boolean | null
          processing_error: string | null
          stripe_event_id: string
        }
        Insert: {
          created_at?: string | null
          data: Json
          event_type: string
          id?: string
          processed?: boolean | null
          processing_error?: string | null
          stripe_event_id: string
        }
        Update: {
          created_at?: string | null
          data?: Json
          event_type?: string
          id?: string
          processed?: boolean | null
          processing_error?: string | null
          stripe_event_id?: string
        }
        Relationships: []
      }
      subscription_plans: {
        Row: {
          active: boolean | null
          amount: number
          created_at: string | null
          currency: string | null
          description: string | null
          features: Json | null
          id: string
          interval: string
          interval_count: number | null
          limits: Json | null
          name: string
          stripe_price_id: string
          stripe_product_id: string
          trial_period_days: number | null
          updated_at: string | null
        }
        Insert: {
          active?: boolean | null
          amount: number
          created_at?: string | null
          currency?: string | null
          description?: string | null
          features?: Json | null
          id?: string
          interval: string
          interval_count?: number | null
          limits?: Json | null
          name: string
          stripe_price_id: string
          stripe_product_id: string
          trial_period_days?: number | null
          updated_at?: string | null
        }
        Update: {
          active?: boolean | null
          amount?: number
          created_at?: string | null
          currency?: string | null
          description?: string | null
          features?: Json | null
          id?: string
          interval?: string
          interval_count?: number | null
          limits?: Json | null
          name?: string
          stripe_price_id?: string
          stripe_product_id?: string
          trial_period_days?: number | null
          updated_at?: string | null
        }
        Relationships: []
      }
      subscription_usage: {
        Row: {
          account_id: string | null
          created_at: string | null
          id: string
          metric_name: string
          period_end: string
          period_start: string
          stripe_usage_record_id: string | null
          subscription_id: string | null
          updated_at: string | null
          usage_count: number | null
        }
        Insert: {
          account_id?: string | null
          created_at?: string | null
          id?: string
          metric_name: string
          period_end: string
          period_start: string
          stripe_usage_record_id?: string | null
          subscription_id?: string | null
          updated_at?: string | null
          usage_count?: number | null
        }
        Update: {
          account_id?: string | null
          created_at?: string | null
          id?: string
          metric_name?: string
          period_end?: string
          period_start?: string
          stripe_usage_record_id?: string | null
          subscription_id?: string | null
          updated_at?: string | null
          usage_count?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "subscription_usage_account_id_fkey"
            columns: ["account_id"]
            isOneToOne: false
            referencedRelation: "accounts"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "subscription_usage_subscription_id_fkey"
            columns: ["subscription_id"]
            isOneToOne: false
            referencedRelation: "subscriptions"
            referencedColumns: ["id"]
          },
        ]
      }
      subscriptions: {
        Row: {
          account_id: string | null
          cancel_at: string | null
          cancel_at_period_end: boolean | null
          canceled_at: string | null
          created_at: string | null
          current_period_end: string | null
          current_period_start: string | null
          ended_at: string | null
          id: string
          plan_id: string | null
          quantity: number | null
          status: string
          stripe_customer_id: string
          stripe_subscription_id: string
          trial_end: string | null
          trial_start: string | null
          updated_at: string | null
        }
        Insert: {
          account_id?: string | null
          cancel_at?: string | null
          cancel_at_period_end?: boolean | null
          canceled_at?: string | null
          created_at?: string | null
          current_period_end?: string | null
          current_period_start?: string | null
          ended_at?: string | null
          id?: string
          plan_id?: string | null
          quantity?: number | null
          status: string
          stripe_customer_id: string
          stripe_subscription_id: string
          trial_end?: string | null
          trial_start?: string | null
          updated_at?: string | null
        }
        Update: {
          account_id?: string | null
          cancel_at?: string | null
          cancel_at_period_end?: boolean | null
          canceled_at?: string | null
          created_at?: string | null
          current_period_end?: string | null
          current_period_start?: string | null
          ended_at?: string | null
          id?: string
          plan_id?: string | null
          quantity?: number | null
          status?: string
          stripe_customer_id?: string
          stripe_subscription_id?: string
          trial_end?: string | null
          trial_start?: string | null
          updated_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "subscriptions_account_id_fkey"
            columns: ["account_id"]
            isOneToOne: false
            referencedRelation: "accounts"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "subscriptions_plan_id_fkey"
            columns: ["plan_id"]
            isOneToOne: false
            referencedRelation: "subscription_plans"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      current_user_account_id: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      user_owns_portfolio: {
        Args: { portfolio_id: string }
        Returns: boolean
      }
    }
    Enums: {
      account_status:
        | "active"
        | "inactive"
        | "suspended"
        | "trialing"
        | "cancelled"
      portfolio_action: "buy" | "sell"
      risk_level: "conservative" | "moderate" | "aggressive"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {
      account_status: [
        "active",
        "inactive",
        "suspended",
        "trialing",
        "cancelled",
      ],
      portfolio_action: ["buy", "sell"],
      risk_level: ["conservative", "moderate", "aggressive"],
    },
  },
} as const
